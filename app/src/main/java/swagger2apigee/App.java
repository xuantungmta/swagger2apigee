/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package swagger2apigee;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import io.swagger.parser.OpenAPIParser;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.parser.core.models.SwaggerParseResult;

public class App {
    public String getGreeting() {
        return "Swagger v3 to APIGee";
    }

    public void generateAPIXml(OpenAPI openAPI) {
        String[] splitUrl = openAPI.getServers().get(0).getUrl().split("/");
        String contextPath = splitUrl[splitUrl.length - 1];
        for (String key : openAPI.getPaths().keySet()) {
            PathItem api = openAPI.getPaths().get(key);
            try {
                Operation operation;
                if (api.getGet() != null)
                    operation = api.getGet();
                else if (api.getPost() != null)
                    operation = api.getPost();
                else if (api.getPut() != null)
                    operation = api.getPut();
                else if (api.getDelete() != null)
                    operation = api.getDelete();
                else
                    throw new Exception("Cannot find method of api: " + api.toString());

                Path path = Paths.get("./results");
                if (!Files.exists(path))
                    Files.createDirectories(path);
                createAPIXml(path.toString(), contextPath, key, operation.getOperationId());
            } catch (ParserConfigurationException | TransformerException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void createAPIXml(String pathDir, String contextPath, String apiPath, String apiName)
            throws ParserConfigurationException, TransformerException {
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

        Document doc = docBuilder.newDocument();
        doc.setXmlStandalone(true);
        String fileName = "AM-Target-" + apiName;

        Element rootElement = doc.createElement("AssignMessage");
        rootElement.setAttribute("async", "false");
        rootElement.setAttribute("continueOnError", "false");
        rootElement.setAttribute("enabled", "true");
        rootElement.setAttribute("name", fileName);
        doc.appendChild(rootElement);

        Element displayNameElement = doc.createElement("DisplayName");
        displayNameElement.setTextContent(fileName);
        rootElement.appendChild(displayNameElement);

        Element propertiesElement = doc.createElement("Properties");
        rootElement.appendChild(propertiesElement);

        Element assignVariableElement = doc.createElement("AssignVariable");
        rootElement.appendChild(assignVariableElement);

        Element nameElement = doc.createElement("Name");
        nameElement.setTextContent("cmv.target.path");
        assignVariableElement.appendChild(nameElement);

        Element templateElement = doc.createElement("Template");
        templateElement.setTextContent("/" + contextPath + apiPath);
        assignVariableElement.appendChild(templateElement);

        Element ignoreUnresolvedVariablesElement = doc.createElement("IgnoreUnresolvedVariables");
        ignoreUnresolvedVariablesElement.setTextContent("true");
        rootElement.appendChild(ignoreUnresolvedVariablesElement);

        Element assignToElement = doc.createElement("AssignTo");
        assignToElement.setAttribute("createNew", "false");
        assignToElement.setAttribute("transport", "http");
        assignToElement.setAttribute("type", "request");
        rootElement.appendChild(assignToElement);

        try (FileOutputStream output = new FileOutputStream(
                Paths.get(pathDir, fileName + ".xml").toFile())) {
            writeXml(doc, output);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void writeXml(Document doc,
            OutputStream output)
            throws TransformerException {

        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");

        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(output);

        transformer.transform(source, result);
    }

    public static void main(String[] args) {
        App app = new App();
        System.out.println(app.getGreeting());
        // if (args.length <= 1)
        // throw new InvalidParameterException("Không tìm thấy đường dẫn swagger");

        SwaggerParseResult result = new OpenAPIParser().readLocation(
                "http://117.4.247.68:10204/cmv-cs-api-auth-composite/auth-composite/openapi/v3/api-docs", null, null);
        OpenAPI openAPI = result.getOpenAPI();
        if (result.getMessages() != null)
            result.getMessages().forEach(System.err::println);
        if (openAPI != null)
            app.generateAPIXml(openAPI);
    }
}
